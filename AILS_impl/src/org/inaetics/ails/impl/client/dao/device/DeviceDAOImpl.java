package org.inaetics.ails.impl.client.dao.device;

import org.inaetics.ails.api.client.dao.device.DeviceDAO;
import org.inaetics.ails.api.common.model.AnonUser;
import org.inaetics.ails.api.common.model.Device;
import org.inaetics.ails.api.common.model.User;
import org.inaetics.ails.api.server.user.service.UserService;

import com.google.common.base.Preconditions;

/**
 * The DeviceFactoryImpl class provides an implementation of the {@link DeviceFactory DeviceFactory}
 * 
 * @author L. Buit, N. Korthout, J. Naus
 * @version 0.1.0
 * @since 05-11-2015
 */
public class DeviceDAOImpl implements DeviceDAO {

    private volatile UserService userService;
    
    private Device device;

    @Override
    public Device createDevice(String name, byte[] mac) {  
        // Get a anonymous user with a UUID generated by the server.
        AnonUser anonUser = userService.add(
                Preconditions.checkNotNull(name, "Name should not be null"), 
                Preconditions.checkNotNull(mac, "Name should not be null"));
        
        // Create a user on the device
        User user = new User(anonUser.getUuid(), name, mac);

        return device = new Device(user, null);
    }

    @Override
    public Device readDevice() {
        return device;
    }

    @Override
    public Device updateDevice(Device device) {
        return this.device = device;
    }
}
